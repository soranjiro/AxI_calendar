// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CognitoAuthScopes = "CognitoAuth.Scopes"
)

// Defines values for ThemeFieldType.
const (
	Boolean  ThemeFieldType = "boolean"
	Date     ThemeFieldType = "date"
	Datetime ThemeFieldType = "datetime"
	Number   ThemeFieldType = "number"
	Select   ThemeFieldType = "select"
	Text     ThemeFieldType = "text"
	Textarea ThemeFieldType = "textarea"
)

// ConfirmForgotPasswordRequest defines model for ConfirmForgotPasswordRequest.
type ConfirmForgotPasswordRequest struct {
	ConfirmationCode string              `json:"confirmation_code"`
	Email            openapi_types.Email `json:"email"`
	NewPassword      string              `json:"new_password"`
}

// ConfirmSignupRequest defines model for ConfirmSignupRequest.
type ConfirmSignupRequest struct {
	ConfirmationCode string              `json:"confirmation_code"`
	Email            openapi_types.Email `json:"email"`
}

// CreateEntryRequest defines model for CreateEntryRequest.
type CreateEntryRequest struct {
	// Data Keys should match field names defined in the specified theme.
	Data      map[string]interface{} `json:"data"`
	EntryDate openapi_types.Date     `json:"entry_date"`
	ThemeId   openapi_types.UUID     `json:"theme_id"`
}

// CreateThemeRequest defines model for CreateThemeRequest.
type CreateThemeRequest struct {
	Fields []ThemeField `json:"fields"`

	// SupportedFeatures Optional list of features supported by this new theme.
	SupportedFeatures *[]string `json:"supported_features,omitempty"`
	ThemeName         string    `json:"theme_name"`
}

// Entry defines model for Entry.
type Entry struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Data Key-value pairs based on the theme's fields definition
	Data map[string]interface{} `json:"data"`

	// EntryDate The primary date for this entry on the calendar
	EntryDate openapi_types.Date  `json:"entry_date"`
	EntryId   *openapi_types.UUID `json:"entry_id,omitempty"`
	ThemeId   openapi_types.UUID  `json:"theme_id"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
	UserId    *openapi_types.UUID `json:"user_id,omitempty"`
}

// EntryCountResponse defines model for EntryCountResponse.
type EntryCountResponse struct {
	// Count The number of entries.
	Count int64 `json:"count"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// ForgotPasswordRequest defines model for ForgotPasswordRequest.
type ForgotPasswordRequest struct {
	Email openapi_types.Email `json:"email"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Status *string `json:"status,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	AccessToken  *string `json:"access_token,omitempty"`
	ExpiresIn    *int    `json:"expires_in,omitempty"`
	IdToken      *string `json:"id_token,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// RefreshTokenRequest defines model for RefreshTokenRequest.
type RefreshTokenRequest struct {
	RefreshToken string `json:"refresh_token"`
}

// SignupRequest defines model for SignupRequest.
type SignupRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// Theme defines model for Theme.
type Theme struct {
	CreatedAt   *time.Time          `json:"created_at,omitempty"`
	Fields      []ThemeField        `json:"fields"`
	IsDefault   *bool               `json:"is_default,omitempty"`
	OwnerUserId *openapi_types.UUID `json:"owner_user_id,omitempty"`

	// SupportedFeatures List of features supported by this theme (e.g., 'monthly_summary').
	SupportedFeatures *[]string           `json:"supported_features,omitempty"`
	ThemeId           *openapi_types.UUID `json:"theme_id,omitempty"`
	ThemeName         string              `json:"theme_name"`
	UpdatedAt         *time.Time          `json:"updated_at,omitempty"`
}

// ThemeField defines model for ThemeField.
type ThemeField struct {
	// Label Display label for the field
	Label string `json:"label"`

	// Name Internal field name (unique within theme, snake_case recommended)
	Name     string `json:"name"`
	Required *bool  `json:"required,omitempty"`

	// Type Data type of the field
	Type ThemeFieldType `json:"type"`
}

// ThemeFieldType Data type of the field
type ThemeFieldType string

// UpdateEntryRequest defines model for UpdateEntryRequest.
type UpdateEntryRequest struct {
	// Data Keys should match field names defined in the theme.
	Data      map[string]interface{} `json:"data"`
	EntryDate openapi_types.Date     `json:"entry_date"`
}

// UpdateThemeRequest Only theme_name, fields, and supported_features can be updated for custom themes.
type UpdateThemeRequest struct {
	Fields []ThemeField `json:"fields"`

	// SupportedFeatures Optional updated list of features supported by this theme.
	SupportedFeatures *[]string `json:"supported_features,omitempty"`
	ThemeName         string    `json:"theme_name"`
}

// User defines model for User.
type User struct {
	Email  *openapi_types.Email `json:"email,omitempty"`
	UserId *openapi_types.UUID  `json:"user_id,omitempty"`
}

// EntryIdParam defines model for EntryIdParam.
type EntryIdParam = openapi_types.UUID

// FeatureNameParam defines model for FeatureNameParam.
type FeatureNameParam = string

// ThemeIdParam defines model for ThemeIdParam.
type ThemeIdParam = openapi_types.UUID

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Forbidden defines model for Forbidden.
type Forbidden = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// GetEntriesParams defines parameters for GetEntries.
type GetEntriesParams struct {
	// StartDate Start date (YYYY-MM-DD)
	StartDate openapi_types.Date `form:"start_date" json:"start_date"`

	// EndDate End date (YYYY-MM-DD)
	EndDate openapi_types.Date `form:"end_date" json:"end_date"`

	// ThemeIds Comma-separated list of theme IDs to filter by
	ThemeIds *string `form:"theme_ids,omitempty" json:"theme_ids,omitempty"`
}

// GetThemesThemeIdEntriesCountParams defines parameters for GetThemesThemeIdEntriesCount.
type GetThemesThemeIdEntriesCountParams struct {
	// StartDate Start date (YYYY-MM-DD)
	StartDate openapi_types.Date `form:"start_date" json:"start_date"`

	// EndDate End date (YYYY-MM-DD)
	EndDate openapi_types.Date `form:"end_date" json:"end_date"`
}

// PostAuthConfirmForgotPasswordJSONRequestBody defines body for PostAuthConfirmForgotPassword for application/json ContentType.
type PostAuthConfirmForgotPasswordJSONRequestBody = ConfirmForgotPasswordRequest

// PostAuthConfirmSignupJSONRequestBody defines body for PostAuthConfirmSignup for application/json ContentType.
type PostAuthConfirmSignupJSONRequestBody = ConfirmSignupRequest

// PostAuthForgotPasswordJSONRequestBody defines body for PostAuthForgotPassword for application/json ContentType.
type PostAuthForgotPasswordJSONRequestBody = ForgotPasswordRequest

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = LoginRequest

// PostAuthRefreshJSONRequestBody defines body for PostAuthRefresh for application/json ContentType.
type PostAuthRefreshJSONRequestBody = RefreshTokenRequest

// PostAuthSignupJSONRequestBody defines body for PostAuthSignup for application/json ContentType.
type PostAuthSignupJSONRequestBody = SignupRequest

// PostEntriesJSONRequestBody defines body for PostEntries for application/json ContentType.
type PostEntriesJSONRequestBody = CreateEntryRequest

// PutEntriesEntryIdJSONRequestBody defines body for PutEntriesEntryId for application/json ContentType.
type PutEntriesEntryIdJSONRequestBody = UpdateEntryRequest

// PostThemesJSONRequestBody defines body for PostThemes for application/json ContentType.
type PostThemesJSONRequestBody = CreateThemeRequest

// PutThemesThemeIdJSONRequestBody defines body for PutThemesThemeId for application/json ContentType.
type PutThemesThemeIdJSONRequestBody = UpdateThemeRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Confirm forgot password and set new password
	// (POST /auth/confirm-forgot-password)
	PostAuthConfirmForgotPassword(ctx echo.Context) error
	// Confirm user signup
	// (POST /auth/confirm-signup)
	PostAuthConfirmSignup(ctx echo.Context) error
	// Initiate forgot password flow
	// (POST /auth/forgot-password)
	PostAuthForgotPassword(ctx echo.Context) error
	// Log in a user
	// (POST /auth/login)
	PostAuthLogin(ctx echo.Context) error
	// Log out user (client-side token removal)
	// (POST /auth/logout)
	PostAuthLogout(ctx echo.Context) error
	// Get current authenticated user's info
	// (GET /auth/me)
	GetAuthMe(ctx echo.Context) error
	// Refresh access token using refresh token
	// (POST /auth/refresh)
	PostAuthRefresh(ctx echo.Context) error
	// Register a new user
	// (POST /auth/signup)
	PostAuthSignup(ctx echo.Context) error
	// List entries within a date range
	// (GET /entries)
	GetEntries(ctx echo.Context, params GetEntriesParams) error
	// Create a new entry
	// (POST /entries)
	PostEntries(ctx echo.Context) error
	// Delete an entry
	// (DELETE /entries/{entry_id})
	DeleteEntriesEntryId(ctx echo.Context, entryId EntryIdParam) error
	// Get entry details
	// (GET /entries/{entry_id})
	GetEntriesEntryId(ctx echo.Context, entryId EntryIdParam) error
	// Update an entry
	// (PUT /entries/{entry_id})
	PutEntriesEntryId(ctx echo.Context, entryId EntryIdParam) error
	// Health check endpoint
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// List available themes
	// (GET /themes)
	GetThemes(ctx echo.Context) error
	// Create a new custom theme
	// (POST /themes)
	PostThemes(ctx echo.Context) error
	// Delete a custom theme
	// (DELETE /themes/{theme_id})
	DeleteThemesThemeId(ctx echo.Context, themeId ThemeIdParam) error
	// Get theme details
	// (GET /themes/{theme_id})
	GetThemesThemeId(ctx echo.Context, themeId ThemeIdParam) error
	// Update a custom theme
	// (PUT /themes/{theme_id})
	PutThemesThemeId(ctx echo.Context, themeId ThemeIdParam) error
	// Get the number of entries for a specific theme within a date range
	// (GET /themes/{theme_id}/entries/count)
	GetThemesThemeIdEntriesCount(ctx echo.Context, themeId ThemeIdParam, params GetThemesThemeIdEntriesCountParams) error
	// Execute a specific feature for a theme (e.g., aggregation)
	// (GET /themes/{theme_id}/features/{feature_name})
	GetThemesThemeIdFeaturesFeatureName(ctx echo.Context, themeId ThemeIdParam, featureName FeatureNameParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthConfirmForgotPassword converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthConfirmForgotPassword(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthConfirmForgotPassword(ctx)
	return err
}

// PostAuthConfirmSignup converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthConfirmSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthConfirmSignup(ctx)
	return err
}

// PostAuthForgotPassword converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthForgotPassword(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthForgotPassword(ctx)
	return err
}

// PostAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthLogin(ctx)
	return err
}

// PostAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogout(ctx echo.Context) error {
	var err error

	ctx.Set(CognitoAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthLogout(ctx)
	return err
}

// GetAuthMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthMe(ctx echo.Context) error {
	var err error

	ctx.Set(CognitoAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthMe(ctx)
	return err
}

// PostAuthRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthRefresh(ctx)
	return err
}

// PostAuthSignup converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthSignup(ctx)
	return err
}

// GetEntries converts echo context to params.
func (w *ServerInterfaceWrapper) GetEntries(ctx echo.Context) error {
	var err error

	ctx.Set(CognitoAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEntriesParams
	// ------------- Required query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Required query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, true, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// ------------- Optional query parameter "theme_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "theme_ids", ctx.QueryParams(), &params.ThemeIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter theme_ids: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEntries(ctx, params)
	return err
}

// PostEntries converts echo context to params.
func (w *ServerInterfaceWrapper) PostEntries(ctx echo.Context) error {
	var err error

	ctx.Set(CognitoAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEntries(ctx)
	return err
}

// DeleteEntriesEntryId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEntriesEntryId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "entry_id" -------------
	var entryId EntryIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "entry_id", ctx.Param("entry_id"), &entryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entry_id: %s", err))
	}

	ctx.Set(CognitoAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteEntriesEntryId(ctx, entryId)
	return err
}

// GetEntriesEntryId converts echo context to params.
func (w *ServerInterfaceWrapper) GetEntriesEntryId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "entry_id" -------------
	var entryId EntryIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "entry_id", ctx.Param("entry_id"), &entryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entry_id: %s", err))
	}

	ctx.Set(CognitoAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEntriesEntryId(ctx, entryId)
	return err
}

// PutEntriesEntryId converts echo context to params.
func (w *ServerInterfaceWrapper) PutEntriesEntryId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "entry_id" -------------
	var entryId EntryIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "entry_id", ctx.Param("entry_id"), &entryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entry_id: %s", err))
	}

	ctx.Set(CognitoAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutEntriesEntryId(ctx, entryId)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetThemes converts echo context to params.
func (w *ServerInterfaceWrapper) GetThemes(ctx echo.Context) error {
	var err error

	ctx.Set(CognitoAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetThemes(ctx)
	return err
}

// PostThemes converts echo context to params.
func (w *ServerInterfaceWrapper) PostThemes(ctx echo.Context) error {
	var err error

	ctx.Set(CognitoAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostThemes(ctx)
	return err
}

// DeleteThemesThemeId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteThemesThemeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "theme_id" -------------
	var themeId ThemeIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "theme_id", ctx.Param("theme_id"), &themeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter theme_id: %s", err))
	}

	ctx.Set(CognitoAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteThemesThemeId(ctx, themeId)
	return err
}

// GetThemesThemeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetThemesThemeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "theme_id" -------------
	var themeId ThemeIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "theme_id", ctx.Param("theme_id"), &themeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter theme_id: %s", err))
	}

	ctx.Set(CognitoAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetThemesThemeId(ctx, themeId)
	return err
}

// PutThemesThemeId converts echo context to params.
func (w *ServerInterfaceWrapper) PutThemesThemeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "theme_id" -------------
	var themeId ThemeIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "theme_id", ctx.Param("theme_id"), &themeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter theme_id: %s", err))
	}

	ctx.Set(CognitoAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutThemesThemeId(ctx, themeId)
	return err
}

// GetThemesThemeIdEntriesCount converts echo context to params.
func (w *ServerInterfaceWrapper) GetThemesThemeIdEntriesCount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "theme_id" -------------
	var themeId ThemeIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "theme_id", ctx.Param("theme_id"), &themeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter theme_id: %s", err))
	}

	ctx.Set(CognitoAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThemesThemeIdEntriesCountParams
	// ------------- Required query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Required query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, true, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetThemesThemeIdEntriesCount(ctx, themeId, params)
	return err
}

// GetThemesThemeIdFeaturesFeatureName converts echo context to params.
func (w *ServerInterfaceWrapper) GetThemesThemeIdFeaturesFeatureName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "theme_id" -------------
	var themeId ThemeIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "theme_id", ctx.Param("theme_id"), &themeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter theme_id: %s", err))
	}

	// ------------- Path parameter "feature_name" -------------
	var featureName FeatureNameParam

	err = runtime.BindStyledParameterWithOptions("simple", "feature_name", ctx.Param("feature_name"), &featureName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter feature_name: %s", err))
	}

	ctx.Set(CognitoAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetThemesThemeIdFeaturesFeatureName(ctx, themeId, featureName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/confirm-forgot-password", wrapper.PostAuthConfirmForgotPassword)
	router.POST(baseURL+"/auth/confirm-signup", wrapper.PostAuthConfirmSignup)
	router.POST(baseURL+"/auth/forgot-password", wrapper.PostAuthForgotPassword)
	router.POST(baseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(baseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.GET(baseURL+"/auth/me", wrapper.GetAuthMe)
	router.POST(baseURL+"/auth/refresh", wrapper.PostAuthRefresh)
	router.POST(baseURL+"/auth/signup", wrapper.PostAuthSignup)
	router.GET(baseURL+"/entries", wrapper.GetEntries)
	router.POST(baseURL+"/entries", wrapper.PostEntries)
	router.DELETE(baseURL+"/entries/:entry_id", wrapper.DeleteEntriesEntryId)
	router.GET(baseURL+"/entries/:entry_id", wrapper.GetEntriesEntryId)
	router.PUT(baseURL+"/entries/:entry_id", wrapper.PutEntriesEntryId)
	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.GET(baseURL+"/themes", wrapper.GetThemes)
	router.POST(baseURL+"/themes", wrapper.PostThemes)
	router.DELETE(baseURL+"/themes/:theme_id", wrapper.DeleteThemesThemeId)
	router.GET(baseURL+"/themes/:theme_id", wrapper.GetThemesThemeId)
	router.PUT(baseURL+"/themes/:theme_id", wrapper.PutThemesThemeId)
	router.GET(baseURL+"/themes/:theme_id/entries/count", wrapper.GetThemesThemeIdEntriesCount)
	router.GET(baseURL+"/themes/:theme_id/features/:feature_name", wrapper.GetThemesThemeIdFeaturesFeatureName)

}
