openapi: 3.0.3
info:
  title: AxiCalendar API
  version: 0.1.0
  description: API definition for the AxiCalendar backend service.
servers:
  - url: / # API Gateway stage will prepend the actual base path

paths:
  /health:
    get:
      summary: Health check endpoint
      tags:
        - Health
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /auth/signup:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        "201":
          description: User successfully registered
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/confirm-signup:
    post:
      summary: Confirm user signup
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmSignupRequest"
      responses:
        "200":
          description: Signup confirmed successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/login:
    post:
      summary: Log in a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/logout:
    post:
      summary: Log out user (client-side token removal)
      tags:
        - Auth
      security:
        - CognitoAuth: [] # Requires valid token to invalidate (optional, depends on impl)
      responses:
        "204":
          description: Logout successful (no content)
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/refresh:
    post:
      summary: Refresh access token using refresh token
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/forgot-password:
    post:
      summary: Initiate forgot password flow
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
      responses:
        "200":
          description: Forgot password code sent successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/confirm-forgot-password:
    post:
      summary: Confirm forgot password and set new password
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmForgotPasswordRequest"
      responses:
        "200":
          description: Password reset successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/me:
    get:
      summary: Get current authenticated user's info
      tags:
        - Auth
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: User information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /themes:
    get:
      summary: List available themes
      tags:
        - Themes
      security:
        - CognitoAuth: []
      responses:
        "200":
          description: A list of themes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Theme"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new custom theme
      tags:
        - Themes
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateThemeRequest"
      responses:
        "201":
          description: Theme created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Theme"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /themes/{theme_id}:
    get:
      summary: Get theme details
      tags:
        - Themes
      security:
        - CognitoAuth: []
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Theme details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Theme"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update a custom theme
      tags:
        - Themes
      security:
        - CognitoAuth: []
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateThemeRequest"
      responses:
        "200":
          description: Theme updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Theme"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete a custom theme
      tags:
        - Themes
      security:
        - CognitoAuth: []
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Theme deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /themes/{theme_id}/features/{feature_name}:
    get:
      summary: Execute a specific feature for a theme (e.g., aggregation)
      tags:
        - Themes
      security:
        - CognitoAuth: []
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: feature_name
          in: path
          required: true
          schema:
            type: string
          description: The identifier of the feature to execute (e.g., 'monthly_summary'). Must be listed in the theme's supported_features.
      responses:
        "200":
          description: Feature execution result
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                description: The result structure depends on the executed feature.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /entries:
    get:
      summary: List entries within a date range
      tags:
        - Entries
      security:
        - CognitoAuth: []
      parameters:
        - name: start_date
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Start date (YYYY-MM-DD)
        - name: end_date
          in: query
          required: true
          schema:
            type: string
            format: date
          description: End date (YYYY-MM-DD)
        - name: theme_ids
          in: query
          required: false
          schema:
            type: string
          description: Comma-separated list of theme IDs to filter by
      responses:
        "200":
          description: A list of entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entry"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new entry
      tags:
        - Entries
      security:
        - CognitoAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEntryRequest"
      responses:
        "201":
          description: Entry created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entry"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /entries/{entry_id}:
    get:
      summary: Get entry details
      tags:
        - Entries
      security:
        - CognitoAuth: []
      parameters:
        - name: entry_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Entry details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entry"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Update an entry
      tags:
        - Entries
      security:
        - CognitoAuth: []
      parameters:
        - name: entry_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEntryRequest"
      responses:
        "200":
          description: Entry updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entry"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete an entry
      tags:
        - Entries
      security:
        - CognitoAuth: []
      parameters:
        - name: entry_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Entry deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    HealthCheckResponse:
      type: object
      properties:
        status:
          type: string
          example: "healthy"
    SignupRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
      required:
        - email
        - password
    ConfirmSignupRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        confirmation_code:
          type: string
      required:
        - email
        - confirmation_code
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        id_token:
          type: string
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: integer
    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
      required:
        - refresh_token
    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    ConfirmForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        confirmation_code:
          type: string
        new_password:
          type: string
          format: password
          minLength: 8
      required:
        - email
        - confirmation_code
        - new_password
    User:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
      required:
        - user_id
        - email
    ThemeField:
      type: object
      properties:
        name:
          type: string
          description: Internal field name (unique within theme, snake_case recommended)
          pattern: "^[a-z0-9_]+$"
        label:
          type: string
          description: Display label for the field
        type:
          type: string
          enum: [text, date, datetime, number, boolean, textarea, select]
          description: Data type of the field
        required:
          type: boolean
          default: false
      required:
        - name
        - label
        - type
    Theme:
      type: object
      properties:
        theme_id:
          type: string
          format: uuid
          readOnly: true
        theme_name:
          type: string
        fields:
          type: array
          items:
            $ref: "#/components/schemas/ThemeField"
        is_default:
          type: boolean
          readOnly: true
        owner_user_id:
          type: string
          format: uuid
          readOnly: true
        supported_features:
          type: array
          items:
            type: string
          description: List of features supported by this theme (e.g., 'monthly_summary').
          readOnly: false
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - theme_id
        - theme_name
        - fields
        - is_default
        - created_at
        - updated_at
    CreateThemeRequest:
      type: object
      properties:
        theme_name:
          type: string
        fields:
          type: array
          items:
            $ref: "#/components/schemas/ThemeField"
          minItems: 1
        supported_features:
          type: array
          items:
            type: string
          description: Optional list of features supported by this new theme.
      required:
        - theme_name
        - fields
    UpdateThemeRequest:
      type: object
      description: Only theme_name, fields, and supported_features can be updated for custom themes.
      properties:
        theme_name:
          type: string
        fields:
          type: array
          items:
            $ref: "#/components/schemas/ThemeField"
          minItems: 1
        supported_features:
          type: array
          items:
            type: string
          description: Optional updated list of features supported by this theme.
      required:
        - theme_name
        - fields
    Entry:
      type: object
      properties:
        entry_id:
          type: string
          format: uuid
          readOnly: true
        theme_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
          readOnly: true
        entry_date:
          type: string
          format: date
          description: The primary date for this entry on the calendar
        data:
          type: object
          description: Key-value pairs based on the theme's fields definition
          additionalProperties: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - entry_id
        - theme_id
        - user_id
        - entry_date
        - data
        - created_at
        - updated_at
    CreateEntryRequest:
      type: object
      properties:
        theme_id:
          type: string
          format: uuid
        entry_date:
          type: string
          format: date
        data:
          type: object
          additionalProperties: true
          description: Keys should match field names defined in the specified theme.
      required:
        - theme_id
        - entry_date
        - data
    UpdateEntryRequest:
      type: object
      properties:
        entry_date:
          type: string
          format: date
        data:
          type: object
          additionalProperties: true
          description: Keys should match field names defined in the theme.
      required:
        - entry_date
        - data
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message

  responses:
    BadRequest:
      description: Invalid input or validation error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized (invalid credentials or token)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Forbidden (access denied)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  securitySchemes:
    CognitoAuth:
      type: openIdConnect
      openIdConnectUrl: https://cognito-idp.<region>.amazonaws.com/<userPoolId>/.well-known/openid-configuration
      description: Authentication via Cognito JWT ID Token passed in Authorization header. Requires configuration of region and userPoolId.
